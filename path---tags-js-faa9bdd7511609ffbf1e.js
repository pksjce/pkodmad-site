webpackJsonp([0xf4fd0cb7d0a9],{362:function(e,n){e.exports={pathContext:{nodes:[{excerpt:"Objective The objective of this exercise is to build a working javascript console on the browser.  Analysis The functionality of this console must beâ€¦",html:"<h2>Objective</h2>\n<p>The objective of this exercise is to build a working javascript console on the browser. </p>\n<h2>Analysis</h2>\n<p>The functionality of this console must be as follows -  </p>\n<ol>\n<li>Should interpret only code that is input into the console box.This maybe single line or multiple lines.</li>\n<li>Should maintain the history of what was interpreted before and print this below the console.</li>\n<li>Should show any errors thrown during evaluation.</li>\n</ol>\n<h2>Solution</h2>\n<h3>Trial 1</h3>\n<h4>Test cases -</h4>\n<p>(Initial) </p>\n<ol>\n<li>var s = 1; --> undefined  </li>\n<li>s --> 1;  </li>\n<li>z --> Error:z is not defined.</li>\n</ol>\n<p>The first thought on interpreting javascript is to use eval() method and start printing its results.<br>\nAdd a try/catch to catch any errors and display them;</p>\n<h4>Javascript</h4>\n<pre><code class=\"language-javascript\">    \n$(document).ready(function(){\n    var consoley = $('#console');\n    consoley.keypress(function(evt){\n        if(evt.keyCode === 13){\n            var js = consoley.val();\n            var x;\n            var type = 'result';\n            \n            try{\n                x = eval(js);\n            }catch(e){\n                x = e.message;\n                type= 'error';\n            }\n            $('#userjs').html(js);\n            var ans = make_nice(x, type);\n            $('#answer').html(ans);\n        }\n    });\n});\n\nfunction make_nice(x, type){\n    if(type == \"result\"){\n        if(x === undefined){\n            return \"undefined\";\n        }   \n    } else{\n        return \"Error: \" + x;\n    }\n    return x;\n    \n}\n</code></pre>\n<h4>HTML</h4>\n<pre><code class=\"language-html\">    &#x3C;html>\n        &#x3C;head>\n            &#x3C;script src='jquery.js'>\n            &#x3C;/script>\n            &#x3C;script src='main.js'>\n            &#x3C;/script>\n        &#x3C;/head>\n        &#x3C;body>\n            &#x3C;div>\n                &#x3C;input type = 'text' id='console'>\n            &#x3C;/div>\n            &#x3C;div id='userjs'>\n            &#x3C;/div>\n            &#x3C;div id='answer'>\n            &#x3C;/div>\n        &#x3C;/body>\n    &#x3C;/html>\n</code></pre>\n<p>Since undefined cannot be printed, I had to make a <code>make_nice</code> method where I set <code>undefined</code> as the output.</p>\n<p>This method passes the first and third test cases but fails the second one.\nThe reason for this as per <a href=\"https://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context\">Context for evals</a>, is that eval is executed in the scope of the callback function. This scope is different every different time the callback function is called. Hence the result of the first eval was effectively \"deleted\" and new scope was created for the next event callback. The solution for this is to call eval with scope that persists and in our case global scope.</p>\n<h3>Trial 2</h3>\n<p>Call <code>eval()</code> as <code>window.eval()</code></p>\n<p>With no change in html lets change the keypress callback to </p>\n<h4>Javascript</h4>\n<pre><code class=\"language-javascript\">    consoley.keypress(function(evt){\n        if(evt.keyCode === 13){\n            var js = consoley.val();\n            var x;\n            var type = 'result';\n            \n            try{\n                x = eval(js);\n            }catch(e){\n                x = e.message;\n                type= 'error';\n            }\n            $('#userjs').html(js);\n            var ans = make_nice(x, type);\n            $('#answer').html(ans);\n        }\n    });\n</code></pre>\n<p>This change seems to have done the trick and is passing all 3 of our test cases.<br>\nLet's create another test case.\nAdd below snippet of code to the javascript of the page.</p>\n<pre><code class=\"language-javascript\">    var s = 1;\n</code></pre>\n<p>Now we see that we are able to override the value of <code>s</code> in our mock console. This is highly undesirable behaviour. We do not want users of our console to be able to modify the objects on the page itself and thus mess with the functionality of the page.</p>\n<p>Solutions for this could be -   </p>\n<h3>Trial 3</h3>\n<p>Create a separate object and execute eval in its scope.</p>\n<pre><code class=\"language-javascript\">var s = 2;\n$(document).ready(function(){\n    var consoley = $('#console');\n    consoley.keypress(function(evt){\n        if(evt.keyCode === 13){\n            var js = consoley.val();\n            var x;\n            var type = 'result';\n            var mockConsole = new mock_console();\n            try{\n                x = mockConsole.log(js);\n            }catch(e){\n                x = e.message;\n                type= 'error';\n            }\n            $('#userjs').html(js);\n            var ans = make_nice(x, type);\n            $('#answer').html(ans);\n        }\n    });\n});\n\nvar mock_console = function(){\n    return {\n        log:function(str){\n            var result = eval.call(this, str);\n            return result;\n        }\n    }\n}\n</code></pre>\n<p>This still does not solve our problem because the global scope can still be modified through this function.</p>\n<h3>Trial 4</h3>\n<p>After a lot of search, the only way to escape context of the page alltogether is to execute the eval in an iframe. This is the only place where another html page can be created and still be accessed by our page.</p>\n<p>So I created an iframe by   </p>\n<pre><code class=\"language-html\">    &#x3C;iframe id='myframe' style='display:none'>\n    &#x3C;/iframe>\n</code></pre>\n<p>By changing my mockconsole to point to iframe's contentWindow, we have -</p>\n<pre><code class=\"language-javascript\">    var mockConsole = document.getElementById('myframe').contentWindow;\n    try{\n        x = mockConsole.eval(js);\n    }catch(e){\n        x = e.message;\n        type= 'error';\n    }\n</code></pre>\n<p>Now, when we try to evaluate <code>s</code>, we are not able to access the globally defined <code>s = 2</code>  </p>\n<p>Its a pass!</p>\n<h3>Add Console features</h3>\n<h4>History on uparrow/downarrow</h4>\n<p>This seems to be an easy feature to add. But one caveat I found was<br>\n<code>Arrow keys cannot be detected on keypress event.</code><br>\nOnce this was cleared, I added a keydown event on <code>consoley</code> with the following functionality</p>\n<pre><code class=\"language-javascript\">    consoley.keydown(function(evt){\n        var len = historyStack.length;\n        if(evt.keyCode === 38 &#x26;&#x26; len > 0){\n            uparrowhit +=1;\n            if(len >= uparrowhit){\n                consoley.val(historyStack[len - uparrowhit]);\n            }\n        } else if(evt.keyCode === 40 &#x26;&#x26; len > 0 &#x26;&#x26; uparrowhit > 0){\n            if(len >= uparrowhit &#x26;&#x26; !evt.programmatic){\n                uparrowhit -=1;\n                consoley.val(historyStack[len - uparrowhit]);\n            } else {\n                return;\n            }\n        }\n    });\n</code></pre>\n<p>This seems to work fine, except I am not able to position the cursor of the text box at the end of the text after addition of the code line from history. Turns out <code>evt.preventDefault()</code> at the end of the event handling does the trick.</p>\n<h3>Add autocompletion.</h3>\n<p>This to me seemed a harder task than the feature above.\nAutocompleting would include -  </p>\n<h5>Get all properties of input object.</h5>\n<pre><code class=\"language-javascript\">    //always cache window properties - in our case iframe windows properties.\n    var mockConsole = document.getElementById('myframe').contentWindow;\n    windowProps = function(){\n        var props = [];\n        for(key in mockConsole){\n            props.push(key);\n        }\n        return props;\n    }();\n    //now check if a dot seperated object needs to be evaluated.\n    function addAutocomplete(consoley, js){\n        var inputSplit = js.split('.');\n        var len = inputSplit.length;\n        var autocompletelist = windowProps;\n        var filter = js;\n        if(inputSplit.length > 1 &#x26;&#x26; inputSplit[0] !== 'window'){\n            filter = inputSplit[len -1];\n            var evalStr = inputSplit.slice(0, len-1).join('.');\n            var evaled = eval(evalStr);\n            autocompletelist = [];\n            for(key in evaled){\n                autocompletelist.push(key);\n            }\n        }\n        var autocompleteStr = getAutocompleteStr(autocompletelist, filter);\n        alert(autocompleteStr);\n    }\n\n    function getAutocompleteStr(list, filter){\n        var filterList = list.filter(function(item){\n            if(item.indexOf(filter) === 0){\n                return item;\n            }\n        })\n        filterList.sort(function(a,b){\n            if(a>b){\n                return 1;\n            } else if(a&#x3C;b){\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        if(filterList.length){\n            return filterList[0];\n        } \n        return;\n    }\n</code></pre>\n<p>The <code>alert(autocompleteStr)</code> now gives me the right autocomplete string after every keystroke.</p>\n<h4>Display the autocomplete as a grayed out string behind the input.</h4>\n<pre><code class=\"language-javascript\">        &#x3C;div>\n            &#x3C;input type = 'text' id='console'>\n            &#x3C;div id='autocomplete'>&#x3C;/div>\n        &#x3C;/div>\n\n        //CSS\n        #console{\n            width: 98%;\n            border: 0;\n            border-bottom: 1px solid lightgray;\n            position: absolute;\n            background: transparent\n        }\n        #console:focus{\n            outline: 0;\n            border-bottom: 1px solid lightgray;\n        }\n        #autocomplete{\n            color: lightgray;\n            line-height: 138%;\n            position: absolute;\n            z-index: 9;\n        }\n\n        //Javascript\n        var autocompleteElem = $('#autocomplete');\n        autocompleteElem.css('left',  offset + autodistance);\n        autocompleteStr = autocompleteStr.substr(filterLen, autocompleteStr.length);\n        autocompleteElem.html(autocompleteStr);\n</code></pre>\n<p>This seems to be somewhat satisfactory.</p>\n<h4>Left Arrow must complete the pending autocomplete.</h4>\n<pre><code>```javascript\nconsoley.keypress(function(evt){\n    var js = consoley.val();\n    var key = self._whichKey(evt);\n    if(key === 13){\n        self._uparrowhit = 0;\n        var x;\n        var type = 'result';\n        \n        try{\n            x = mockConsole.eval(js);\n        }catch(e){\n            x = e.message;\n            type= 'error';\n        }\n        self._historyStack.push(js);\n        consoley.val('');\n        self._autocomplete.html('');\n        var ans = self.make_nice(x, type);\n        self._write(js, ans);\n    }\n});\n```\n</code></pre>\n<h3>Making this a plugin</h3>\n<p>The code needs to be modularized and made somewhat like a plugin so that it can be injected to any given div element.  </p>",id:"/Users/pkodmad/Workspace/pkodmad-site/posts/2014-02-04-Writing-a-js-console.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2014-02-04",path:"/blog/writing-a-js-console",title:"Writing a JS Console",tags:["js"]}},{excerpt:"The day I found  Mary Rose Cook's blog , I was fascinated! This was exactly the no nonsense virtual mentor I was looking for. A look through herâ€¦",html:'<p>The day I found <a href="http://maryrosecook.com/">Mary Rose Cook\'s blog</a>, I was fascinated! This was exactly the no nonsense virtual mentor I was looking for. A look through her projects is enough to intimidate faint hearted people like me. With great determination, I picked up <a href="https://github.com/maryrosecook/fibonacciheap">Fibonacci Heaps</a> as my next project.  </p>\n<p>The only connection I felt to the topic when I read her post was that I knew what Binary Heaps were, or at least had a reasonable confidence of finding and understanding them quickly and I knew Djikstra\'s shortest path algorithm of course. With those as my foundations, I hunted for my DataStructures text book and quickly brushed up on binary heaps and how to create and sort them. Teaching my brother and discussing it with him got me up to speed on it\'s space and time complexities. Okay, that was relatively easy.  </p>\n<p>Now what in heaven\'s name were Fibonacci Heaps? I had a vague idea of trees growing in fibonacci numbered rank. I started with Wikipedia. A cursory glance did not help a lot. This was tougher. Mary\'s article, of course just whooshed above my head. So, I thought I should start with some basics. </p>\n<p><a href="http://www.youtube.com/watch?v=yIUFT6AKBGE">Jonathan Shewchuk\'s lecture</a> served as a lengthy but solid starting point. I now knew what priority queues were.Next I looked for some lecture specific to Fibonacci heaps and found <a href="http://www.youtube.com/watch?v=Wbw8_YaAvBY">this entertaining video</a>. It was somewhat informative but not very convincing in it\'s examples. So I decided to tackle it at the source and downloaded <a href="http://www.cs.princeton.edu/courses/archive/fall03/cs528/handouts/fibonacci%20heaps.pdf">Fredman and Tarjan\'s paper</a>. The clarity of the paper was very refreshing. It took me two days to absorb it, but by then I could mentally imagine all the operations in the F-Heap.</p>\n<p>I am not sure how well I could explain it, but here are my example operations using FHeaps for consideration.\n<img src="http://pksjce.github.io/assets/imgs/fheap1.jpg" alt="FHEap1">\n<img src="http://pksjce.github.io/assets/imgs/fheap2.jpg" alt="FHeap2"></p>\n<p>FHeaps are priority heaps whose job is to always give you the smallest key in your heap. The running times for finding minimum are very low because of thier structure. They are thus used in shortest path algorithms and are the best example of speeding an algorithm considerably by only changing datastructure.They achieve this speed by lazy insertion of elements and not sorting the entire heap for every deletion of minimum key.<br>\nHaving said that, FHeaps mainly perform the following three operations</p>\n<ol>\n<li>Insert</li>\n<li>FindMin</li>\n<li>DeleteMin</li>\n</ol>\n<p>I have learnt the decreasemin operation but I havent used it till now, so I will rest my judgement on it\'s importance.</p>\n<p>Implementation of an FHeap is made using a doubly linked circular list with pointers to parent and child added. A pointer to the minimum node is always maintained in the heap instance and updated after every operation.\nHence and FHeap node will look like this.<br>\n{% highlight javascript %}\nNode {\ndata,\nnext,\nprev,\nparent,\nchild,\nrank\n}\n{% endhighlight %}</p>\n<ol>\n<li>\n<p>Insert - During insertion, the new node is lazily added to the list of roots.The pseudocode would be -<br>\n{% highlight javascript %}\nitem = new Node(data)\nnext = min.next\nnext.prev = item;\nitem.next = next;\nmin.next = item;\nitem.prev = min;\nif(item.data &#x3C; min.data){\nmin = item;\n}\n{% endhighlight %}</p>\n</li>\n<li>\n<p>FindMin -  </p>\n</li>\n</ol>\n<p>{% highlight javascript %}\nreturn min\n{% endhighlight %}</p>\n<ol start="3">\n<li>\n<p>DeleteMin - This is a more complex procedure.</p>\n<pre><code>RemoveMin and make its children part of the root list.\nIterate through the rootlist and create new heaps by linking the roots which have same rank.\nDo the above until no two trees in the heap have the same rank.\nNow create a new heap out of the new set of trees.\nCompare the roots of the heap and set min to the smallest key.\n</code></pre>\n</li>\n</ol>\n<p>A detailed example is present in the pictures and <a href="https://github.com/pksjce/f_heaps">my implementation in Javascript</a> might help in better understanding.  </p>\n<p>For an explanation on the outrageous title, I started on this implementation with utmost confidence, but the power of trees and my lack of practice in recursion brought me down comprehensively. I was literally thinking of little numbers inside circles connected to each other for the past two weeks on and off until I finally after two massive attempts at deletemin completed the implementation! And also, I had a grand scheme of showing off my FHeaps using raphael which is still in the works :(</p>',id:"/Users/pkodmad/Workspace/pkodmad-site/posts/2013-11-07-a-lesson-on-heaps.md absPath of file >>> MarkdownRemark",frontmatter:{date:"2013-11-07",path:"/blog/a-lesson-on-heaps",title:"A Lesson on Heaps",tags:["js"]}}],tagName:"js"}}}});
//# sourceMappingURL=path---tags-js-faa9bdd7511609ffbf1e.js.map